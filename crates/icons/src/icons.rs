use std::sync::Arc;

use serde::{Deserialize, Serialize};
use strum::{EnumIter, EnumString, IntoStaticStr};

#[derive(
    Debug, PartialEq, Eq, Copy, Clone, EnumIter, EnumString, IntoStaticStr, Serialize, Deserialize,
)]
#[strum(serialize_all = "snake_case")]
pub enum IconName {
    ArrowCircle,
    ArrowDown,
    ArrowDownRight,
    ArrowLeft,
    ArrowRight,
    ArrowUp,
    ArrowUpFromLine,
    ArrowUpRight,
    Backspace,
    Bell,
    BellOff,
    Blocks,
    Bolt,
    BoltFilled,
    Book,
    CaseSensitive,
    Check,
    ChevronDown,
    /// This chevron indicates a popover menu.
    ChevronDownSmall,
    ChevronLeft,
    ChevronRight,
    ChevronUpDown,
    Circle,
    Close,
    Code,
    Command,
    Control,
    Copy,
    CursorIBeam,
    Dash,
    Debug,
    Delete,
    Diff,
    Disconnected,
    Download,
    Ellipsis,
    EllipsisVertical,
    Envelope,
    Eraser,
    Escape,
    ExpandDown,
    ExpandUp,
    ExpandVertical,
    ExternalLink,
    Eye,
    FileCode,
    FileDoc,
    FileGit,
    FileSearch,
    FileText,
    FileTree,
    Filter,
    Flame,
    Folder,
    Font,
    FontSize,
    FontWeight,
    GenericClose,
    GenericMaximize,
    GenericMinimize,
    GenericRestore,
    GitBranch,
    GitBranchSmall,
    Github,
    Globe,
    Hash,
    HistoryRerun,
    Info,
    InlayHint,
    Keyboard,
    ListTree,
    ListX,
    LockOutlined,
    MagnifyingGlass,
    Maximize,
    Menu,
    MessageBubbles,
    MicMute,
    Minimize,
    Option,
    PageDown,
    PageUp,
    Pencil,
    Person,
    Pin,
    Play,
    PlayAlt,
    PlayBug,
    Plus,
    Power,
    PullRequest,
    Regex,
    ReplNeutral,
    Replace,
    ReplaceAll,
    ReplaceNext,
    Rerun,
    Return,
    RotateCcw,
    Screen,
    SearchSelection,
    SelectAll,
    Server,
    Settings,
    Shift,
    Sliders,
    Space,
    Sparkle,
    Split,
    SquareDot,
    SquareMinus,
    SquarePlus,
    Star,
    StopFilled,
    SwatchBook,
    Tab,
    Terminal,
    Trash,
    TrashAlt,
    Triangle,
    Undo,
    Unpin,
    Update,
    UserCheck,
    Visible,
    Warning,
    WholeWord,
    X,
    XCircle,
}

impl IconName {
    /// Returns the path to this icon.
    pub fn path(&self) -> Arc<str> {
        let file_stem: &'static str = self.into();
        format!("icons/{file_stem}.svg").into()
    }
}
